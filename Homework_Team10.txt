(*Problem: 1*)
("Author:  Brandon*)

A(λx.λy.y)B

(*********************************)
(*Problem: 2*)
("Author:  Brandon*)

[A(λx.λy.y)(λx.λy.x)](λx.λy.x)[B(λx.λy.y)(λx.λy.x)]

(*********************************)
(*Problem: 3*)
("Author:  Kevin*)
λa.λb.(λp.λq.p (λx.λy.x) q)((λp.λq.p q (λx.λy.y)) a ((λp.p (λx.λy.y) (λx.λy.x)) b))((λp.λq.p q (λx.λy.y)) ((λp.p (λx.λy.y) (λx.λy.x)) a) b)

¬B=B (λx.λy.y) (λx.λy.x)
¬A=A (λx.λy.y) (λx.λy.x)

A∧¬B=A (¬B) (λx.λy.y)
¬A∧B=(¬A) B (λx.λy.y)

(A∧¬B)∨(¬A∧B)=(λp.λq.p (λx.λy.x) q)(A(¬B)(λx.λy.y))((¬A)B(λx.λy.y))

Solution
λa.λb.(λp.λq.p (λx.λy.x) q)(a (b (λx.λy.y) (λx.λy.x)) (λx.λy.y))((a (λx.λy.y) (λx.λy.x)) b (λx.λy.y))

(λx.λy.y) (λx.λy.y) (λx.λy.x)=λx.λy.x
(λx.λy.x) (λx.λy.y) (λx.λy.x)=λx.λy.y

(λx.λy.x) (λx.λy.x) (λx.λy.y)=λx.λy.x
(λx.λy.y) (λx.λy.y) (λx.λy.y)=λx.λy.y

(λp.λq.p (λx.λy.x) q) (λx.λy.x) (λx.λy.y)
(λq.(λx.λy.x) (λx.λy.x) q) (λx.λy.y)

(λx.λy.x)=λx.λy.x = TRUE


(*********************************)
(*Problem: 4*)
("Author:  Kevin*)
A) (3,2)    S 
B) if  (x,y)    S, then  (3x – 2y,  x)    S

(x,y)=(2^n+1+1,2^n+1), n ≥ 0.

Verify x=3=2^1+1 , y=2=2^0+1.

x=2^n+1+1 , y=2^n+1.
x=2^n+1+1 , y=2^n+1

Evauluate 3x−2y=3(2^n+1+1)−2(2^n+1)=2^n+2+1.
     (3x−2y,x)=(2^n+2+1,2^n+1+1)

Thus, (x,y)=(2^n+1+1,2^n+1), n ≥ 0.

(*********************************)
(*Problem: 5*)
("Author:  Rebecca*)

x = Empty
Reflect of Empty Tree: reflect(Empty) = Empty
Inorder of Reflect(Empty): inorder(Empty) = []
Reverse of Inorder of Reflect(Empty): rev([]) = []

Therefore, rev(inorder(reflect(Empty))) = [] = inorder(Empty)

Now assume: when l = left, r = right
rev(inorder(reflect(l))) = inorder(l)
rev(inorder(reflect(r))) = inorder(r)

1.) Reflecting a node: reflect(Node(a,l,r)) = Node(a, reflect(r),reflect(l))
2.) Inorder of reflect(node):
     inorder(Node(a, reflect(r),reflect(l)) = inorder(reflect(r))@[a]@inorder(reflect(l))
     Using the inductive hypothesis:
          inorder(reflect(r)) = rev(inorder(r))
          inorder(reflect(l)) = rev(inorder(l))
     Rewritten as:
          rev(inorder(r))@[a]@rev(inorder(l))
3.)Reverse of inorder of reflect(node)
     Now can find rev(inorder(reflect(Node(a,l,r)))) as:
          (using the property of list reversal: rev(x@y) = rev(y)@rev())
          rev(rev(inorder(r)))@rev([a])@rev(rev(inorder(l)))
     Since rev(rev(x)) = x,
          inorder(r)@[a]@inorder(l)
          This is equivalent to: inorder(Node(a,l,r))

Therefore,
     rev(inorder(reflect(Node(a,l,r)))) = inorder(Node(a,l,r))
     By structural induction it is proven that: rev(inorder(reflect(x))) = inorder(x)

(*********************************)
(*Problem: 6*)
("Author:  Rebecca*)


